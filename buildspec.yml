version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.11
    commands:
      - pip install awscli
      - pip install boto3

  build:
    commands:
      # Create and configure the SQS queue
      - aws sqs create-queue --queue-name AirbnbBookingQueue
      - aws sqs create-queue --queue-name AirbnbBookingDLQ
      - BOOKING_QUEUE_URL=$(aws sqs create-queue --queue-name AirbnbBookingQueue --query 'QueueUrl' --output text)
      - BOOKING_DLQ_ARN=$(aws sqs create-queue --queue-name AirbnbBookingDLQ --query 'QueueArn' --output text)
      - aws sqs set-queue-attributes --queue-url "$BOOKING_QUEUE_URL" --attributes AttributeName=RedrivePolicy,AttributeValue='{"deadLetterTargetArn":"'"$BOOKING_DLQ_ARN"'","maxReceiveCount":"3"}'
      
      # Create IAM roles for Lambda functions
      - PRODUCER_LAMBDA_ROLE_ARN=$(aws iam create-role --role-name ProducerLambdaRole --assume-role-policy-document file://producer-lambda-role-policy.json --query 'Role.Arn' --output text)
      - ENRICHMENT_LAMBDA_ROLE_ARN=$(aws iam create-role --role-name EnrichmentLambdaRole --assume-role-policy-document file://enrichment-lambda-role-policy.json --query 'Role.Arn' --output text)
      - DESTINATION_LAMBDA_ROLE_ARN=$(aws iam create-role --role-name DestinationLambdaRole --assume-role-policy-document file://destination-lambda-role-policy.json --query 'Role.Arn' --output text)
      
      # Create the producer Lambda function
      - PRODUCER_LAMBDA_ARN=$(aws lambda create-function ... --role "$PRODUCER_LAMBDA_ROLE_ARN" --query 'FunctionArn' --output text)
      
      # Create the enrichment Lambda function
      - ENRICHMENT_LAMBDA_ARN=$(aws lambda create-function ... --role "$ENRICHMENT_LAMBDA_ROLE_ARN" --query 'FunctionArn' --output text)
      
      # Create the destination Lambda function
      - DESTINATION_LAMBDA_ARN=$(aws lambda create-function ... --role "$DESTINATION_LAMBDA_ROLE_ARN" --query 'FunctionArn' --output text)
      
      # Create the S3 bucket
      - aws s3 mb s3://airbnb-booking-records4
      
      # Create the EventBridge rule to trigger the destination Lambda function
      - aws events put-rule --name FilteredBookingRule --event-pattern "{\"source\": [\"aws.sqs\"], \"detail-type\": [\"SQS Message Sent\"], \"detail\": {\"queueName\": [\"AirbnbBookingQueue\"]}"
      
      # Create the EventBridge pipe
      - PIPE_FILTER_ARN=$(aws events create-archive ... --query 'ArchiveArn' --output text)
      - aws events create-pipe --name AirbnbBookingPipe --source-archive AirbnbBookingPipe --enrichment-arn "$ENRICHMENT_LAMBDA_ARN" --destination-arn "$DESTINATION_LAMBDA_ARN" --source-type SQS --source-arn "$BOOKING_QUEUE_URL" --max-provisioned-bandwidth 1000
      - aws events put-pipe-filter --name AirbnbBookingPipeFilter --pipe-name AirbnbBookingPipe --filter-arn "$PIPE_FILTER_ARN" --filter-rules "{\"booking_duration\":\"greater than 1 day\"}"
      - aws events enable-pipe --name AirbnbBookingPipe

  post_build:
    commands:
      # Cleanup temporary files
      - rm producer_lambda.zip enrichment_lambda.zip destination_lambda.zip
